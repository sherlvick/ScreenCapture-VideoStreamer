{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import io from'socket.io-client';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const socket=io('http://localhost:8000');function App(){const[stream,setStream]=useState(null);const videoRef=useRef();useEffect(()=>{const captureScreen=async()=>{try{const stream=await navigator.mediaDevices.getDisplayMedia({video:true});setStream(stream);videoRef.current.srcObject=stream;const mediaRecorder=new MediaRecorder(stream);mediaRecorder.ondataavailable=event=>{if(event.data.size>0){console.log(event.data);socket.emit('screen_data',event.data);}};mediaRecorder.start(100);// Send data every 100ms\n}catch(err){console.error(\"Error: \"+err);}};captureScreen();},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Screen Capture\"}),/*#__PURE__*/_jsx(\"video\",{ref:videoRef,autoPlay:true,style:{width:'100%'}})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsx","_jsx","jsxs","_jsxs","socket","App","stream","setStream","videoRef","captureScreen","navigator","mediaDevices","getDisplayMedia","video","current","srcObject","mediaRecorder","MediaRecorder","ondataavailable","event","data","size","console","log","emit","start","err","error","children","ref","autoPlay","style","width"],"sources":["/home/aman/screen-capture_video-streamer/screen-capture/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:8000');\n\nfunction App() {\n  const [stream, setStream] = useState(null);\n  const videoRef = useRef();\n\n  useEffect(() => {\n    const captureScreen = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getDisplayMedia({ video: true });\n        setStream(stream);\n        videoRef.current.srcObject = stream;\n\n        const mediaRecorder = new MediaRecorder(stream);\n        mediaRecorder.ondataavailable = (event) => {\n          if (event.data.size > 0) {\n            console.log(event.data)\n            socket.emit('screen_data', event.data);\n          }\n        };\n        mediaRecorder.start(100); // Send data every 100ms\n      } catch (err) {\n        console.error(\"Error: \" + err);\n      }\n    };\n\n    captureScreen();\n  }, []);\n\n  return (\n    <div>\n      <h1>Screen Capture</h1>\n      <video ref={videoRef} autoPlay style={{ width: '100%' }}></video>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,MAAO,CAAAC,EAAE,KAAM,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAElC,KAAM,CAAAC,MAAM,CAAGL,EAAE,CAAC,uBAAuB,CAAC,CAE1C,QAAS,CAAAM,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CAC1C,KAAM,CAAAY,QAAQ,CAAGV,MAAM,CAAC,CAAC,CAEzBD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAY,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAH,MAAM,CAAG,KAAM,CAAAI,SAAS,CAACC,YAAY,CAACC,eAAe,CAAC,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAC,CAC5EN,SAAS,CAACD,MAAM,CAAC,CACjBE,QAAQ,CAACM,OAAO,CAACC,SAAS,CAAGT,MAAM,CAEnC,KAAM,CAAAU,aAAa,CAAG,GAAI,CAAAC,aAAa,CAACX,MAAM,CAAC,CAC/CU,aAAa,CAACE,eAAe,CAAIC,KAAK,EAAK,CACzC,GAAIA,KAAK,CAACC,IAAI,CAACC,IAAI,CAAG,CAAC,CAAE,CACvBC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAACC,IAAI,CAAC,CACvBhB,MAAM,CAACoB,IAAI,CAAC,aAAa,CAAEL,KAAK,CAACC,IAAI,CAAC,CACxC,CACF,CAAC,CACDJ,aAAa,CAACS,KAAK,CAAC,GAAG,CAAC,CAAE;AAC5B,CAAE,MAAOC,GAAG,CAAE,CACZJ,OAAO,CAACK,KAAK,CAAC,SAAS,CAAGD,GAAG,CAAC,CAChC,CACF,CAAC,CAEDjB,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEN,KAAA,QAAAyB,QAAA,eACE3B,IAAA,OAAA2B,QAAA,CAAI,gBAAc,CAAI,CAAC,cACvB3B,IAAA,UAAO4B,GAAG,CAAErB,QAAS,CAACsB,QAAQ,MAACC,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAO,CAAE,CAAQ,CAAC,EAC9D,CAAC,CAEV,CAEA,cAAe,CAAA3B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}